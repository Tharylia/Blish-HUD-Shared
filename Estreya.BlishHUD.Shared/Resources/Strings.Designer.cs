//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Estreya.BlishHUD.Shared.Resources {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Estreya.BlishHUD.Shared.Resources.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Adding Colors to ColorPicker... ähnelt.
        /// </summary>
        internal static string BaseSettingsView_AddingColorsToColorPicker {
            get {
                return ResourceManager.GetString("BaseSettingsView_AddingColorsToColorPicker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Loading ColorPicker... ähnelt.
        /// </summary>
        internal static string BaseSettingsView_LoadingColorPicker {
            get {
                return ResourceManager.GetString("BaseSettingsView_LoadingColorPicker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Loading Colors... ähnelt.
        /// </summary>
        internal static string BaseSettingsView_LoadingColors {
            get {
                return ResourceManager.GetString("BaseSettingsView_LoadingColors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Defines the background color. ähnelt.
        /// </summary>
        internal static string Setting_BackgroundColor_Description {
            get {
                return ResourceManager.GetString("Setting_BackgroundColor_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Background Color ähnelt.
        /// </summary>
        internal static string Setting_BackgroundColor_Name {
            get {
                return ResourceManager.GetString("Setting_BackgroundColor_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Defines the opacity of the background. ähnelt.
        /// </summary>
        internal static string Setting_BackgroundColorOpacity_Description {
            get {
                return ResourceManager.GetString("Setting_BackgroundColorOpacity_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Background Color Opacity ähnelt.
        /// </summary>
        internal static string Setting_BackgroundColorOpacity_Name {
            get {
                return ResourceManager.GetString("Setting_BackgroundColorOpacity_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Whether the module should be build from the top or the bottom. ähnelt.
        /// </summary>
        internal static string Setting_BuildDirection_Description {
            get {
                return ResourceManager.GetString("Setting_BuildDirection_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Build Direction ähnelt.
        /// </summary>
        internal static string Setting_BuildDirection_Name {
            get {
                return ResourceManager.GetString("Setting_BuildDirection_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Whether the module should be running in debug mode. ähnelt.
        /// </summary>
        internal static string Setting_DebugEnabled_Description {
            get {
                return ResourceManager.GetString("Setting_DebugEnabled_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Debug Enabled ähnelt.
        /// </summary>
        internal static string Setting_DebugEnabled_Name {
            get {
                return ResourceManager.GetString("Setting_DebugEnabled_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Defines the font size for the module. ähnelt.
        /// </summary>
        internal static string Setting_FontSize_Description {
            get {
                return ResourceManager.GetString("Setting_FontSize_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Font Size ähnelt.
        /// </summary>
        internal static string Setting_FontSize_Name {
            get {
                return ResourceManager.GetString("Setting_FontSize_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Whether the module should be displayed. ähnelt.
        /// </summary>
        internal static string Setting_GlobalEnabled_Description {
            get {
                return ResourceManager.GetString("Setting_GlobalEnabled_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Module Enabled ähnelt.
        /// </summary>
        internal static string Setting_GlobalEnabled_Name {
            get {
                return ResourceManager.GetString("Setting_GlobalEnabled_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The keybinding which will toggle the module. ähnelt.
        /// </summary>
        internal static string Setting_GlobalEnabledHotkey_Description {
            get {
                return ResourceManager.GetString("Setting_GlobalEnabledHotkey_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Module Hotkey ähnelt.
        /// </summary>
        internal static string Setting_GlobalEnabledHotkey_Name {
            get {
                return ResourceManager.GetString("Setting_GlobalEnabledHotkey_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Whether module should hide when the player is in combat. ähnelt.
        /// </summary>
        internal static string Setting_HideInCombat_Description {
            get {
                return ResourceManager.GetString("Setting_HideInCombat_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hide in Combat ähnelt.
        /// </summary>
        internal static string Setting_HideInCombat_Name {
            get {
                return ResourceManager.GetString("Setting_HideInCombat_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Whether the module should hide when the map is open. ähnelt.
        /// </summary>
        internal static string Setting_HideOnMap_Description {
            get {
                return ResourceManager.GetString("Setting_HideOnMap_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hide on open Map ähnelt.
        /// </summary>
        internal static string Setting_HideOnMap_Name {
            get {
                return ResourceManager.GetString("Setting_HideOnMap_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Whether the module should hide when cutscenes are played. ähnelt.
        /// </summary>
        internal static string Setting_HideOnMissingMumbleTicks_Description {
            get {
                return ResourceManager.GetString("Setting_HideOnMissingMumbleTicks_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hide on Cutscenes ähnelt.
        /// </summary>
        internal static string Setting_HideOnMissingMumbleTicks_Name {
            get {
                return ResourceManager.GetString("Setting_HideOnMissingMumbleTicks_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Where the module should be displayed on the X axis. ähnelt.
        /// </summary>
        internal static string Setting_LocationX_Description {
            get {
                return ResourceManager.GetString("Setting_LocationX_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Location X ähnelt.
        /// </summary>
        internal static string Setting_LocationX_Name {
            get {
                return ResourceManager.GetString("Setting_LocationX_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Where the module should be displayed on the Y axis. ähnelt.
        /// </summary>
        internal static string Setting_LocationY_Description {
            get {
                return ResourceManager.GetString("Setting_LocationY_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Location Y ähnelt.
        /// </summary>
        internal static string Setting_LocationY_Name {
            get {
                return ResourceManager.GetString("Setting_LocationY_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Defines the opacity of the module. ähnelt.
        /// </summary>
        internal static string Setting_Opacity_Description {
            get {
                return ResourceManager.GetString("Setting_Opacity_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opacity ähnelt.
        /// </summary>
        internal static string Setting_Opacity_Name {
            get {
                return ResourceManager.GetString("Setting_Opacity_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Whether the module should add it&apos;s own corner icon to access settings. ähnelt.
        /// </summary>
        internal static string Setting_RegisterCornerIcon_Description {
            get {
                return ResourceManager.GetString("Setting_RegisterCornerIcon_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Register Corner Icon ähnelt.
        /// </summary>
        internal static string Setting_RegisterCornerIcon_Name {
            get {
                return ResourceManager.GetString("Setting_RegisterCornerIcon_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The width of the module. ähnelt.
        /// </summary>
        internal static string Setting_Width_Description {
            get {
                return ResourceManager.GetString("Setting_Width_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Width ähnelt.
        /// </summary>
        internal static string Setting_Width_Name {
            get {
                return ResourceManager.GetString("Setting_Width_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Open Settings ähnelt.
        /// </summary>
        internal static string SettingsView_OpenSettings {
            get {
                return ResourceManager.GetString("SettingsView_OpenSettings", resourceCulture);
            }
        }
    }
}
